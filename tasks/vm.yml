---
- name: Ensure the VM console log directory exists
  ansible.builtin.file:
    path: "{{ console_log_path | dirname }}"
    state: directory
    owner: "{{ libvirt_vm_log_owner }}"
    group: "{{ libvirt_vm_log_owner }}"
    recurse: true
    mode: 0770
  when: console_log_enabled | bool
  become: "{{ libvirt_vm_sudo }}"

- name: Validate VM interfaces
  ansible.builtin.include_tasks: check-interface.yml
  vars:
    interface: "{{ item }}"
  with_items: "{{ interfaces }}"

- name: Validate Host USB Devices
  ansible.builtin.include_tasks: check-usb-devices.yml
  vars:
    usb_device: "{{ item }}"
  with_items: "{{ usb_devices }}"

- name: Ensure the VM is defined
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', vm.xml_file | default('vm.xml.j2')) }}"
    uri: "{{ libvirt_vm_uri | default(omit, true) }}"
  become: "{{ libvirt_vm_sudo }}"
  register: __vm_defined

- name: Customization tasks  # noqa no-handler
  when:
    - __vm_defined.changed
    - vm.customize | default(true)
  tags: ["customize"]
  vars:
    __q35_name: "enp{{ item.bus | default(index + 1) }}s0"
    __i440_name: "ens{{ item.slot | default(index + 1) }}"
    name: "{{ __q35_name if machine == 'q35' else __i440_name }}"
    bootproto: "{{ item.bootproto | default('static' if item.address is defined else 'dhcp') }}"
    gateway: "{{ item.gateway | default(false) }}"
    default_route: "{{ item.default_route | default('yes') }}"
    address: "{{ item.address | default(false) }}"
    prefix: "{{ item.prefix | default(24) }}"
    dns_servers: "{{ item.dns_servers | default(['1.1.1.1', '8.8.8.8']) }}"
    domain: "{{ item.domain | default(false) }}"
    mtu: "{{ item.mtu | default(1500) }}"
  block:
    - name: Create temporary dir
      ansible.builtin.file:
        path: "/tmp/virt-customize-{{ vm.name }}"
        state: directory
        owner: root
        group: root
        mode: 0750

    - name: Copy customization script
      ansible.builtin.copy:
        src: customize_net.sh
        dest: "/tmp/virt-customize-{{ vm.name }}/customize_net"
        owner: root
        group: root
        mode: 0750

    - name: Generate network-scripts
      ansible.builtin.template:
        src: ifcfg.j2
        dest: "/tmp/virt-customize-{{ vm.name }}/ifcfg-{{ name }}"
        owner: root
        group: root
        mode: 0640
      loop: "{{ vm.interfaces }}"
      loop_control:
        label: "{{ name }}"
        index_var: index

    - name: Generate systemd-networkd network configs
      ansible.builtin.template:
        src: networkd.network.j2
        dest: "/tmp/virt-customize-{{ vm.name }}/{{ name }}.network"
        owner: root
        group: root
        mode: 0640
      loop: "{{ vm.interfaces }}"
      loop_control:
        label: "{{ name }}"
        index_var: index

    - name: Customize VM  # noqa no-changed-when
      ansible.builtin.command:
        cmd: >
          virt-customize
          --domain {{ vm.name }}
          --truncate /etc/hostname
          --append-line '/etc/hostname:{{ vm.name }}'
          --append-line '/etc/hosts:127.0.0.1 {{ vm.name }}{% if vm.domain %} {{ vm.name }}.{{ vm.domain }}{% endif %}'
          --copy-in /tmp/virt-customize-{{ vm.name }}:/tmp
          --move /tmp/virt-customize-{{ vm.name }}:/tmp/virt-customize
          --chmod 0755:/tmp/virt-customize/customize_net
          --run-command /tmp/virt-customize/customize_net
          --delete /tmp/virt-customize

- name: Ensure the VM is running and started at boot
  community.libvirt.virt:
    name: "{{ vm.name }}"
    autostart: "{{ autostart | bool }}"
    state: "{{ 'running' if (start | bool) else 'shutdown' }}"
    uri: "{{ libvirt_vm_uri | default(omit, true) }}"
  become: "{{ libvirt_vm_sudo }}"
