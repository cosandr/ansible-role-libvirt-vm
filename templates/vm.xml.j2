<domain type='{{ libvirt_vm_engine }}'>
  <name>{{ vm.name }}</name>
  {% if vm.uuid is defined %}
  <uuid>{{ vm.uuid }}</uuid>
  {% elif (libvirt_vm_default_uuid_deterministic | bool) or (vm.uuid_deterministic is defined and (vm.uuid_deterministic | bool)) %}
  <uuid>{{ vm.name | to_uuid }}</uuid>
  {% endif %}
  {% if vm.os_id is defined %}
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
      <libosinfo:os id="{{ vm.os_id  }}"/>
    </libosinfo:libosinfo>
  </metadata>
  {% endif %}
  <memory>{{ vm.memory_mb | int * 1024 }}</memory>
  <vcpu>{{ vm.vcpus }}</vcpu>
  {% if vm.clock_offset |default( libvirt_vm_clock_offset ) %}
  <clock offset="{{ vm.clock_offset }}"/>
  {% else %}
  <clock sync="localtime"/>
  {% endif %}
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <os>
    <type arch='{{ libvirt_vm_arch }}'{% if machine is not none %} machine='{{ machine }}'{% endif %}>hvm</type>
    <bootmenu enable='no'/>
    <boot dev='hd'/>
    <boot dev='cdrom'/>
    {% if enable_console | bool or console_log_enabled | bool %}
    <bios useserial='yes'/>
    {% endif %}
    {% if boot_firmware == "efi"  %}
      {# NOTE: pflash requires qemu 1.6 or newer. There are alternatives for older versions, but
               they do not work with secure boot. See OVMF readme for an overview #}
      <loader readonly='yes' type='pflash'>{{ libvirt_vm_ovmf_efi_firmware_path }}</loader>
      <nvram template='{{ libvirt_vm_ovmf_efi_variable_store_path }}' templateFormat='{{ libvirt_vm_ovmf_efi_variable_store_format }}'/>
    {% endif %}
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  {% if cpu_mode %}
  <cpu mode='{{ cpu_mode }}'>
    {% if cpu_model_name %}
    <model{% for k, v in cpu_model_options.items() %} {{ k }}='{{ v }}'{% endfor %}>{{ cpu_model_name }}</model>
    {% endif %}
    {% for f in cpu_features %}
    <feature policy="{{ f.policy | default('require') }}" name="{{ f.name | default(f) }}"/>
    {% endfor %}
    <topology sockets="1" dies="1" cores="{{ vm.vcpus }}" threads="1"/>
  </cpu>
  {% endif %}
{% if virtiofs_mounts %}
  <memoryBacking>
    <source type='memfd'/>
    <access mode='shared'/>
  </memoryBacking>
{% endif %}
  <devices>
    <emulator>{{ libvirt_vm_emulator }}</emulator>
{% for volume in volumes %}
    <disk type='{{ volume.type | default(libvirt_volume_default_type) }}' device='{{ volume.device | default(libvirt_volume_default_device) }}'>
      <driver name='qemu' type='{{ volume.format | default(libvirt_volume_default_format) }}'{% for k, v in volume.get('driver_options', {}).items() %} {{ k }}='{{ v }}'{% endfor %}/>
      {% if volume.type | default(libvirt_volume_default_type) == 'file' %}
      <source file='{{ volume.file_path |default(libvirt_volume_default_images_path) }}/{{ volume.name}}'/>
      {% elif volume.type | default(libvirt_volume_default_type) == 'network' %}
        {% if volume.auth.username is defined %}
      <auth username='{{ volume.auth.username }}'>
        <secret type='{{ volume.auth.type }}' {% if volume.auth.uuid is defined and volume.auth.uuid is not none %} uuid='{{ volume.auth.uuid }}' {% else %} usage='{{ volume.auth.usage }}' {% endif %}/>
      </auth>
        {% endif %} {# End volume.auth.username check #}
        {% if volume.source.name is defined %}
      <source protocol='{{ volume.source.protocol }}' name='{{ volume.source.name }}'>
          {% for host in volume.source.hosts_list %}
        <host name='{{ host }}' {% if volume.source.port is defined and volume.source.port is not none %} port='{{ volume.source.port }}' {% endif %}/>
          {% endfor %}
      </source>
        {% endif %} {# End volume.source.name check #}
      {% elif volume.type | default(libvirt_volume_default_type) == 'block' %}
      <source dev='{{ volume.dev }}'/>
      {% else %} {# End elif volume.type is defined #}
      <source pool='{{ volume.pool | default("default") }}' volume='{{ volume.name }}'/>
      {% endif %}
      {% if volume.target is undefined %}
      <target dev='vd{{ 'abcdefghijklmnopqrstuvwxyz'[loop.index - 1] }}' {% if volume.device | default(libvirt_volume_default_device) == 'cdrom' %}bus='sata'{% endif %}/>
      {% else %}
      <target dev='{{ volume.target }}' {% if volume.device | default(libvirt_volume_default_device) == 'cdrom' %}bus='sata'{% endif %}/>
      {% endif %}
      {% if volume.serial | default(false) %}
      <serial>{{ volume.serial }}</serial>
      {% endif %}
      {% if volume.blockio | default({}) %}
      <blockio{% for k, v in volume.blockio.items() %} {{ k }}='{{ v }}'{% endfor %}/>
      {% endif %}
    </disk>
{% endfor %}
{% for mount in virtiofs_mounts %}
    <filesystem type='mount' accessmode='passthrough'>
      <driver type='virtiofs' queue='1024'/>
      <source dir='{{ mount.source }}'/>
      <target dir='{{ mount.target }}'/>
    </filesystem>
{% endfor %}
{% for interface in interfaces %}
{% if interface.type is defined and interface.type == 'direct' %}
    <interface type='direct' {% if interface.trust_guest_rx_filters | default(libvirt_vm_trust_guest_rx_filters) | bool %}trustGuestRxFilters='yes'{% endif %}>
      <source dev='{{ interface.source.dev }}' mode='{{ interface.source.mode | default('vepa') }}'/>
{% elif interface.type is defined and interface.type == 'bridge' %}
    <interface type='bridge'>
      <source bridge='{{ interface.source.dev }}'/>
{% elif interface.type is not defined or interface.type == 'network' %}
    <interface type='network'>
      <source network='{{ interface.network }}'/>
{% endif %}
      {% if interface.mac is defined %}
      <mac address='{{ interface.mac }}'/>
      {% endif %}
      {# if the network configuration is invalid this can still appear in the xml #}
      {# (say you enter 'bond' instead of 'bridge' in your variables) #}
      {% if interface.model is defined %}
      <model type='{{ interface.model }}'/>
      {% else %}
      <model type='virtio'/>
      {% endif %}
      {% if interface.alias is defined %}
      <alias name='ua-{{ interface.alias }}'/>
      {% endif %}
{% if machine == "q35" %}
      <address type="pci" domain="0x0000" bus="{{ '%#x' % (interface.bus | default(loop.index)) }}" slot="{{ '%#x' % (interface.slot | default(0)) }}" function="0x0"/>
{% else %}
      <address type="pci" domain="0x0000" bus="{{ '%#x' % (interface.bus | default(1)) }}" slot="{{ '%#x' % (interface.slot | default(loop.index)) }}" function="0x0"/>
{% endif %}
    </interface>
{% endfor %}
{% if console_log_enabled | bool %}
    <serial type='file'>
      <source path='{{ console_log_path }}'/>
    </serial>
    <serial type='pty'/>
    <console type='file'>
      <source path='{{ console_log_path }}'/>
      <target type='serial'/>
    </console>
{% elif enable_console | bool %}
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
{% endif %}
{% if enable_vnc |bool %}
    <graphics type='vnc' autoport='yes' listen='127.0.0.1'>
      <listen type='address' address='127.0.0.1'/>
    </graphics>
{% endif %}
{% if enable_spice |bool %}
    <graphics type='spice' autoport='yes'>
      <listen type='address'/>
    </graphics>
{% endif %}
{% if enable_guest_virtio |bool %}
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
    </channel>
{% endif %}
{% for usb_device in usb_devices %}
    <hostdev mode='subsystem' type='usb' managed='yes'>
      <source>
        <vendor id='{{ usb_device.vendor }}'/>
        <product id='{{ usb_device.product }}'/>
      </source>
    </hostdev>
  {% endfor %}
  {% for uuid in mdev_uuids %}
    <hostdev mode='subsystem' type='mdev' managed='no' model='vfio-pci' display='off'>
      <source>
        <address uuid='{{ uuid }}'/>
      </source>
    </hostdev>
  {% endfor %}
  {% for pci_device in pci_devices %}
    <hostdev mode='subsystem' type='pci' {% for k, v in (pci_device.attributes | default({'managed': 'yes'})).items() %} {{ k }}='{{ v }}'{% endfor %}>
      <source>
        <address{% for k, v in pci_device.address.items() %} {{ k }}='{{ v }}'{% endfor %}/>
      </source>
{% if pci_device.raw | default('') %}
{{ pci_device.raw | indent(6) }}
{% endif %}
    </hostdev>
  {% endfor %}
    <rng model="virtio"><backend model="random">/dev/urandom</backend></rng>
  </devices>
  {% if seclabel_options %}
  <seclabel{% for k, v in seclabel_options.items() %} {{ k }}='{{ v }}'{% endfor %}>
  {% if seclabel_label %}
    <label>{{ seclabel_label }}</label>
  {% endif %}
  </seclabel>
  {% endif %}
  {% if qemu_commandline_args %}
  <commandline xmlns="http://libvirt.org/schemas/domain/qemu/1.0">
    {% for arg in qemu_commandline_args %}
    <arg value='{{ arg }}'/>
    {% endfor %}
  </commandline>
  {% endif %}
</domain>
